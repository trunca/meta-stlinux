diff -rupN glibc-2.10.1/include/unistd.h glibc-2.10.1-mod/include/unistd.h
--- glibc-2.10.1/include/unistd.h	2008-07-27 20:23:17.000000000 +0200
+++ glibc-2.10.1-mod/include/unistd.h	2013-04-22 16:22:48.389478728 +0200
@@ -61,6 +61,8 @@ extern int __chdir (__const char *__path
 extern int __fchdir (int __fd);
 extern char *__getcwd (char *__buf, size_t __size);
 extern int __rmdir (const char *__path);
+extern int __execvpe (const char *file, char *const argv[],
+		      char *const envp[]);
 
 /* Get the canonical absolute name of the named directory, and put it in SIZE
    bytes of BUF.  Returns NULL if the directory couldn't be determined or
diff -rupN glibc-2.10.1/posix/execvp.c glibc-2.10.1-mod/posix/execvp.c
--- glibc-2.10.1/posix/execvp.c	2007-01-04 00:01:15.000000000 +0100
+++ glibc-2.10.1-mod/posix/execvp.c	2013-04-22 16:24:53.205473443 +0200
@@ -1,4 +1,4 @@
-/* Copyright (C) 1991,92, 1995-99, 2002, 2004, 2005, 2007
+/* Copyright (C) 1991,92, 1995-99, 2002, 2004, 2005, 2007, 2009
    Free Software Foundation, Inc.
    This file is part of the GNU C Library.
 
@@ -17,31 +17,7 @@
    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
    02111-1307 USA.  */
 
-#include <alloca.h>
 #include <unistd.h>
-#include <stdarg.h>
-#include <stdbool.h>
-#include <stdlib.h>
-#include <string.h>
-#include <errno.h>
-#include <paths.h>
-
-
-/* The file is accessible but it is not an executable file.  Invoke
-   the shell to interpret it as a script.  */
-static void
-internal_function
-scripts_argv (const char *file, char *const argv[], int argc, char **new_argv)
-{
-  /* Construct an argument list for the shell.  */
-  new_argv[0] = (char *) _PATH_BSHELL;
-  new_argv[1] = (char *) file;
-  while (argc > 1)
-    {
-      new_argv[argc] = argv[argc - 1];
-      --argc;
-    }
-}
 
 
 /* Execute FILE, searching in the `PATH' environment variable if it contains
@@ -51,170 +27,6 @@ execvp (file, argv)
      const char *file;
      char *const argv[];
 {
-  if (*file == '\0')
-    {
-      /* We check the simple case first. */
-      __set_errno (ENOENT);
-      return -1;
-    }
-
-  if (strchr (file, '/') != NULL)
-    {
-      /* Don't search when it contains a slash.  */
-      __execve (file, argv, __environ);
-
-      if (errno == ENOEXEC)
-	{
-	  /* Count the arguments.  */
-	  int argc = 0;
-	  while (argv[argc++])
-	    ;
-	  size_t len = (argc + 1) * sizeof (char *);
-	  char **script_argv;
-	  void *ptr = NULL;
-	  if (__libc_use_alloca (len))
-	    script_argv = alloca (len);
-	  else
-	    script_argv = ptr = malloc (len);
-
-	  if (script_argv != NULL)
-	    {
-	      scripts_argv (file, argv, argc, script_argv);
-	      __execve (script_argv[0], script_argv, __environ);
-
-	      free (ptr);
-	    }
-	}
-    }
-  else
-    {
-      size_t pathlen;
-      size_t alloclen = 0;
-      char *path = getenv ("PATH");
-      if (path == NULL)
-	{
-	  pathlen = confstr (_CS_PATH, (char *) NULL, 0);
-	  alloclen = pathlen + 1;
-	}
-      else
-	pathlen = strlen (path);
-
-      size_t len = strlen (file) + 1;
-      alloclen += pathlen + len + 1;
-
-      char *name;
-      char *path_malloc = NULL;
-      if (__libc_use_alloca (alloclen))
-	name = alloca (alloclen);
-      else
-	{
-	  path_malloc = name = malloc (alloclen);
-	  if (name == NULL)
-	    return -1;
-	}
-
-      if (path == NULL)
-	{
-	  /* There is no `PATH' in the environment.
-	     The default search path is the current directory
-	     followed by the path `confstr' returns for `_CS_PATH'.  */
-	  path = name + pathlen + len + 1;
-	  path[0] = ':';
-	  (void) confstr (_CS_PATH, path + 1, pathlen);
-	}
-
-      /* Copy the file name at the top.  */
-      name = (char *) memcpy (name + pathlen + 1, file, len);
-      /* And add the slash.  */
-      *--name = '/';
-
-      char **script_argv = NULL;
-      void *script_argv_malloc = NULL;
-      bool got_eacces = false;
-      char *p = path;
-      do
-	{
-	  char *startp;
-
-	  path = p;
-	  p = __strchrnul (path, ':');
-
-	  if (p == path)
-	    /* Two adjacent colons, or a colon at the beginning or the end
-	       of `PATH' means to search the current directory.  */
-	    startp = name + 1;
-	  else
-	    startp = (char *) memcpy (name - (p - path), path, p - path);
-
-	  /* Try to execute this name.  If it works, execve will not return. */
-	  __execve (startp, argv, __environ);
-
-	  if (errno == ENOEXEC)
-	    {
-	      if (script_argv == NULL)
-		{
-		  /* Count the arguments.  */
-		  int argc = 0;
-		  while (argv[argc++])
-		    ;
-		  size_t arglen = (argc + 1) * sizeof (char *);
-		  if (__libc_use_alloca (alloclen + arglen))
-		    script_argv = alloca (arglen);
-		  else
-		    script_argv = script_argv_malloc = malloc (arglen);
-		  if (script_argv == NULL)
-		    {
-		      /* A possible EACCES error is not as important as
-			 the ENOMEM.  */
-		      got_eacces = false;
-		      break;
-		    }
-		  scripts_argv (startp, argv, argc, script_argv);
-		}
-
-	      __execve (script_argv[0], script_argv, __environ);
-	    }
-
-	  switch (errno)
-	    {
-	    case EACCES:
-	      /* Record the we got a `Permission denied' error.  If we end
-		 up finding no executable we can use, we want to diagnose
-		 that we did find one but were denied access.  */
-	      got_eacces = true;
-	    case ENOENT:
-	    case ESTALE:
-	    case ENOTDIR:
-	      /* Those errors indicate the file is missing or not executable
-		 by us, in which case we want to just try the next path
-		 directory.  */
-	    case ENODEV:
-	    case ETIMEDOUT:
-	      /* Some strange filesystems like AFS return even
-		 stranger error numbers.  They cannot reasonably mean
-		 anything else so ignore those, too.  */
-	      break;
-
-	    default:
-	      /* Some other error means we found an executable file, but
-		 something went wrong executing it; return the error to our
-		 caller.  */
-	      return -1;
-	    }
-	}
-      while (*p++ != '\0');
-
-      /* We tried every element and none of them worked.  */
-      if (got_eacces)
-	/* At least one failure was due to permissions, so report that
-	   error.  */
-	__set_errno (EACCES);
-
-      free (script_argv_malloc);
-      free (path_malloc);
-    }
-
-  /* Return the error from the last attempt (probably ENOENT).  */
-  return -1;
+  return __execvpe (file, argv, __environ);
 }
 libc_hidden_def (execvp)
diff -rupN glibc-2.10.1/posix/execvpe.c glibc-2.10.1-mod/posix/execvpe.c
--- glibc-2.10.1/posix/execvpe.c	1970-01-01 01:00:00.000000000 +0100
+++ glibc-2.10.1-mod/posix/execvpe.c	2013-04-22 16:22:48.389478728 +0200
@@ -0,0 +1,221 @@
+/* Copyright (C) 1991,92, 1995-99, 2002, 2004, 2005, 2007, 2009
+   Free Software Foundation, Inc.
+   This file is part of the GNU C Library.
+
+   The GNU C Library is free software; you can redistribute it and/or
+   modify it under the terms of the GNU Lesser General Public
+   License as published by the Free Software Foundation; either
+   version 2.1 of the License, or (at your option) any later version.
+
+   The GNU C Library is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+   Lesser General Public License for more details.
+
+   You should have received a copy of the GNU Lesser General Public
+   License along with the GNU C Library; if not, write to the Free
+   Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+   02111-1307 USA.  */
+
+#include <alloca.h>
+#include <unistd.h>
+#include <stdarg.h>
+#include <stdbool.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <paths.h>
+
+
+/* The file is accessible but it is not an executable file.  Invoke
+   the shell to interpret it as a script.  */
+static void
+internal_function
+scripts_argv (const char *file, char *const argv[], int argc, char **new_argv)
+{
+  /* Construct an argument list for the shell.  */
+  new_argv[0] = (char *) _PATH_BSHELL;
+  new_argv[1] = (char *) file;
+  while (argc > 1)
+    {
+      new_argv[argc] = argv[argc - 1];
+      --argc;
+    }
+}
+
+
+/* Execute FILE, searching in the `PATH' environment variable if it contains
+   no slashes, with arguments ARGV and environment from ENVP.  */
+int
+__execvpe (file, argv, envp)
+     const char *file;
+     char *const argv[];
+     char *const envp[];
+{
+  if (*file == '\0')
+    {
+      /* We check the simple case first. */
+      __set_errno (ENOENT);
+      return -1;
+    }
+
+  if (strchr (file, '/') != NULL)
+    {
+      /* Don't search when it contains a slash.  */
+      __execve (file, argv, envp);
+
+      if (errno == ENOEXEC)
+	{
+	  /* Count the arguments.  */
+	  int argc = 0;
+	  while (argv[argc++])
+	    ;
+	  size_t len = (argc + 1) * sizeof (char *);
+	  char **script_argv;
+	  void *ptr = NULL;
+	  if (__libc_use_alloca (len))
+	    script_argv = alloca (len);
+	  else
+	    script_argv = ptr = malloc (len);
+
+	  if (script_argv != NULL)
+	    {
+	      scripts_argv (file, argv, argc, script_argv);
+	      __execve (script_argv[0], script_argv, envp);
+
+	      free (ptr);
+	    }
+	}
+    }
+  else
+    {
+      size_t pathlen;
+      size_t alloclen = 0;
+      char *path = getenv ("PATH");
+      if (path == NULL)
+	{
+	  pathlen = confstr (_CS_PATH, (char *) NULL, 0);
+	  alloclen = pathlen + 1;
+	}
+      else
+	pathlen = strlen (path);
+
+      size_t len = strlen (file) + 1;
+      alloclen += pathlen + len + 1;
+
+      char *name;
+      char *path_malloc = NULL;
+      if (__libc_use_alloca (alloclen))
+	name = alloca (alloclen);
+      else
+	{
+	  path_malloc = name = malloc (alloclen);
+	  if (name == NULL)
+	    return -1;
+	}
+
+      if (path == NULL)
+	{
+	  /* There is no `PATH' in the environment.
+	     The default search path is the current directory
+	     followed by the path `confstr' returns for `_CS_PATH'.  */
+	  path = name + pathlen + len + 1;
+	  path[0] = ':';
+	  (void) confstr (_CS_PATH, path + 1, pathlen);
+	}
+
+      /* Copy the file name at the top.  */
+      name = (char *) memcpy (name + pathlen + 1, file, len);
+      /* And add the slash.  */
+      *--name = '/';
+
+      char **script_argv = NULL;
+      void *script_argv_malloc = NULL;
+      bool got_eacces = false;
+      char *p = path;
+      do
+	{
+	  char *startp;
+
+	  path = p;
+	  p = __strchrnul (path, ':');
+
+	  if (p == path)
+	    /* Two adjacent colons, or a colon at the beginning or the end
+	       of `PATH' means to search the current directory.  */
+	    startp = name + 1;
+	  else
+	    startp = (char *) memcpy (name - (p - path), path, p - path);
+
+	  /* Try to execute this name.  If it works, execve will not return. */
+	  __execve (startp, argv, envp);
+
+	  if (errno == ENOEXEC)
+	    {
+	      if (script_argv == NULL)
+		{
+		  /* Count the arguments.  */
+		  int argc = 0;
+		  while (argv[argc++])
+		    ;
+		  size_t arglen = (argc + 1) * sizeof (char *);
+		  if (__libc_use_alloca (alloclen + arglen))
+		    script_argv = alloca (arglen);
+		  else
+		    script_argv = script_argv_malloc = malloc (arglen);
+		  if (script_argv == NULL)
+		    {
+		      /* A possible EACCES error is not as important as
+			 the ENOMEM.  */
+		      got_eacces = false;
+		      break;
+		    }
+		  scripts_argv (startp, argv, argc, script_argv);
+		}
+
+	      __execve (script_argv[0], script_argv, envp);
+	    }
+
+	  switch (errno)
+	    {
+	    case EACCES:
+	      /* Record the we got a `Permission denied' error.  If we end
+		 up finding no executable we can use, we want to diagnose
+		 that we did find one but were denied access.  */
+	      got_eacces = true;
+	    case ENOENT:
+	    case ESTALE:
+	    case ENOTDIR:
+	      /* Those errors indicate the file is missing or not executable
+		 by us, in which case we want to just try the next path
+		 directory.  */
+	    case ENODEV:
+	    case ETIMEDOUT:
+	      /* Some strange filesystems like AFS return even
+		 stranger error numbers.  They cannot reasonably mean
+		 anything else so ignore those, too.  */
+	      break;
+
+	    default:
+	      /* Some other error means we found an executable file, but
+		 something went wrong executing it; return the error to our
+		 caller.  */
+	      return -1;
+	    }
+	}
+      while (*p++ != '\0');
+
+      /* We tried every element and none of them worked.  */
+      if (got_eacces)
+	/* At least one failure was due to permissions, so report that
+	   error.  */
+	__set_errno (EACCES);
+
+      free (script_argv_malloc);
+      free (path_malloc);
+    }
+
+  /* Return the error from the last attempt (probably ENOENT).  */
+  return -1;
+}
+weak_alias (__execvpe, execvpe)
diff -rupN glibc-2.10.1/posix/Makefile glibc-2.10.1-mod/posix/Makefile
--- glibc-2.10.1/posix/Makefile	2009-02-07 09:18:49.000000000 +0100
+++ glibc-2.10.1-mod/posix/Makefile	2013-04-22 16:22:48.389478728 +0200
@@ -43,7 +43,7 @@ routines :=								      \
 	wait waitpid wait3 wait4 waitid					      \
 	alarm sleep pause nanosleep					      \
 	fork vfork _exit						      \
-	execve fexecve execv execle execl execvp execlp			      \
+	execve fexecve execv execle execl execvp execvpe execlp			      \
 	getpid getppid							      \
 	getuid geteuid getgid getegid getgroups setuid setgid group_member    \
 	getpgid setpgid getpgrp bsd-getpgrp setpgrp getsid setsid	      \
diff -rupN glibc-2.10.1/posix/unistd.h glibc-2.10.1-mod/posix/unistd.h
--- glibc-2.10.1/posix/unistd.h	2009-03-10 14:45:24.000000000 +0100
+++ glibc-2.10.1-mod/posix/unistd.h	2013-04-22 16:22:48.389478728 +0200
@@ -551,6 +551,14 @@ extern int execvp (__const char *__file,
 extern int execlp (__const char *__file, __const char *__arg, ...)
      __THROW __nonnull ((1));
 
+#ifdef __USE_GNU
+/* Execute FILE, searching in the `PATH' environment variable if it contains
+   no slashes, with arguments ARGV and environment from `environ'.  */
+extern int execvpe (__const char *__file, char *__const __argv[],
+                    char *__const __envp[])
+     __THROW __nonnull ((1));
+#endif
+
 
 #if defined __USE_MISC || defined __USE_XOPEN
 /* Add INC to priority of the current process.  */
diff -rupN glibc-2.10.1/posix/Versions glibc-2.10.1-mod/posix/Versions
--- glibc-2.10.1/posix/Versions	2009-02-26 02:20:41.000000000 +0100
+++ glibc-2.10.1-mod/posix/Versions	2013-04-22 16:23:27.053477074 +0200
@@ -130,6 +130,7 @@ libc {
   }
   GLIBC_2.10 {
     __posix_getopt;
+    execvpe;
   }
   GLIBC_PRIVATE {
     __libc_fork; __libc_pwrite;
